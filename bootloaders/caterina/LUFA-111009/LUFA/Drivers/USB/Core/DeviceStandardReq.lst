   1               		.file	"DeviceStandardReq.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.USB_Device_ProcessControlRequest,"ax",@progbits
  11               	.global	USB_Device_ProcessControlRequest
  13               	USB_Device_ProcessControlRequest:
  14               	.LFB81:
  15               		.file 1 "LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c"
   1:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** /*
   2:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c ****              LUFA Library
   3:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c ****      Copyright (C) Dean Camera, 2011.
   4:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
   5:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c ****   dean [at] fourwalledcubicle [dot] com
   6:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c ****            www.lufa-lib.org
   7:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** */
   8:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
   9:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** /*
  10:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c ****   Copyright 2011  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
  12:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c ****   Permission to use, copy, modify, distribute, and sell this
  13:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c ****   software and its documentation for any purpose is hereby granted
  14:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c ****   without fee, provided that the above copyright notice appear in
  15:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c ****   all copies and that both that the copyright notice and this
  16:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c ****   permission notice and warranty disclaimer appear in supporting
  17:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c ****   documentation, and that the name of the author not be used in
  18:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c ****   advertising or publicity pertaining to distribution of the
  19:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c ****   software without specific, written prior permission.
  20:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
  21:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c ****   The author disclaim all warranties with regard to this
  22:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c ****   software, including all implied warranties of merchantability
  23:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c ****   and fitness.  In no event shall the author be liable for any
  24:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c ****   special, indirect or consequential damages or any damages
  25:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c ****   whatsoever resulting from loss of use, data or profits, whether
  26:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c ****   in an action of contract, negligence or other tortious action,
  27:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c ****   arising out of or in connection with the use or performance of
  28:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c ****   this software.
  29:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** */
  30:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
  31:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** #define  __INCLUDE_FROM_USB_DRIVER
  32:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** #include "USBMode.h"
  33:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
  34:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** #if defined(USB_CAN_BE_DEVICE)
  35:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
  36:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** #define  __INCLUDE_FROM_DEVICESTDREQ_C
  37:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** #include "DeviceStandardReq.h"
  38:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
  39:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** uint8_t USB_Device_ConfigurationNumber;
  40:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
  41:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** #if !defined(NO_DEVICE_SELF_POWER)
  42:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** bool    USB_Device_CurrentlySelfPowered;
  43:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** #endif
  44:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
  45:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** #if !defined(NO_DEVICE_REMOTE_WAKEUP)
  46:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** bool    USB_Device_RemoteWakeupEnabled;
  47:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** #endif
  48:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
  49:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** void USB_Device_ProcessControlRequest(void)
  50:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** {
  16               		.loc 1 50 0
  17               		.cfi_startproc
  18 0000 0F93      		push r16
  19               	.LCFI0:
  20               		.cfi_def_cfa_offset 3
  21               		.cfi_offset 16, -2
  22 0002 1F93      		push r17
  23               	.LCFI1:
  24               		.cfi_def_cfa_offset 4
  25               		.cfi_offset 17, -3
  26 0004 CF93      		push r28
  27               	.LCFI2:
  28               		.cfi_def_cfa_offset 5
  29               		.cfi_offset 28, -4
  30 0006 DF93      		push r29
  31               	.LCFI3:
  32               		.cfi_def_cfa_offset 6
  33               		.cfi_offset 29, -5
  34 0008 00D0      		rcall .
  35               	.LCFI4:
  36               		.cfi_def_cfa_offset 8
  37 000a CDB7      		in r28,__SP_L__
  38 000c DEB7      		in r29,__SP_H__
  39               	.LCFI5:
  40               		.cfi_def_cfa_register 28
  41               	/* prologue: function */
  42               	/* frame size = 2 */
  43               	/* stack size = 6 */
  44               	.L__stack_usage = 6
  45               	.LVL0:
  46 000e E0E0      		ldi r30,lo8(USB_ControlRequest)
  47 0010 F0E0      		ldi r31,hi8(USB_ControlRequest)
  48               	.LVL1:
  49               	.L2:
  50               	.LBB148:
  51               	.LBB149:
  52               	.LBB150:
  53               		.file 2 "LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h"
   1:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /*
   2:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****              LUFA Library
   3:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****      Copyright (C) Dean Camera, 2011.
   4:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
   5:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   dean [at] fourwalledcubicle [dot] com
   6:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****            www.lufa-lib.org
   7:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** */
   8:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
   9:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /*
  10:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   Copyright 2011  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  12:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   Permission to use, copy, modify, distribute, and sell this
  13:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   software and its documentation for any purpose is hereby granted
  14:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   without fee, provided that the above copyright notice appear in
  15:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   all copies and that both that the copyright notice and this
  16:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   permission notice and warranty disclaimer appear in supporting
  17:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   documentation, and that the name of the author not be used in
  18:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   advertising or publicity pertaining to distribution of the
  19:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   software without specific, written prior permission.
  20:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  21:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   The author disclaim all warranties with regard to this
  22:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   software, including all implied warranties of merchantability
  23:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   and fitness.  In no event shall the author be liable for any
  24:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   special, indirect or consequential damages or any damages
  25:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   in an action of contract, negligence or other tortious action,
  27:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   arising out of or in connection with the use or performance of
  28:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   this software.
  29:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** */
  30:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  31:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \file
  32:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief USB Endpoint definitions for the AVR8 microcontrollers.
  33:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \copydetails Group_EndpointManagement_AVR8
  34:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  35:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  36:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *        dispatch header located in LUFA/Drivers/USB/USB.h.
  37:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  38:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  39:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointRW
  40:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointRW_AVR8 Endpoint Data Reading and Writing (AVR8)
  41:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint data read/write definitions for the Atmel AVR8 architecture.
  42:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  43:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros, variables, enums and types related to data reading and writing from and to e
  44:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  45:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  46:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointPrimitiveRW
  47:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointPrimitiveRW_AVR8 Read/Write of Primitive Data Types (AVR8)
  48:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint primitive read/write definitions for the Atmel AVR8 architecture.
  49:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  50:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros, variables, enums and types related to data reading and writing of primitive 
  51:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  from and to endpoints.
  52:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  53:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  54:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointPacketManagement
  55:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointPacketManagement_AVR8 Endpoint Packet Management (AVR8)
  56:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint packet management definitions for the Atmel AVR8 architecture.
  57:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  58:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros, variables, enums and types related to packet management of endpoints.
  59:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  60:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  61:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointManagement
  62:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointManagement_AVR8 Endpoint Management (AVR8)
  63:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint management definitions for the Atmel AVR8 architecture.
  64:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  65:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros and enums related to endpoint management when in USB Device mode. This
  66:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  module contains the endpoint management macros, as well as endpoint interrupt and data
  67:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  send/receive functions for various data types.
  68:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  69:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  @{
  70:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  71:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  72:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** #ifndef __ENDPOINT_AVR8_H__
  73:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** #define __ENDPOINT_AVR8_H__
  74:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  75:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Includes: */
  76:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#include "../../../../Common/Common.h"
  77:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#include "../USBTask.h"
  78:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#include "../USBInterrupt.h"
  79:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  80:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Enable C linkage for C++ Compilers: */
  81:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#if defined(__cplusplus)
  82:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			extern "C" {
  83:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#endif
  84:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  85:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Preprocessor Checks: */
  86:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#if !defined(__INCLUDE_FROM_USB_DRIVER)
  87:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#error Do not include this file directly. Include LUFA/Drivers/USB/USB.h instead.
  88:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#endif
  89:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  90:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Private Interface - For use in library only: */
  91:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	#if !defined(__DOXYGEN__)
  92:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Macros: */
  93:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define _ENDPOINT_GET_MAXSIZE(EPIndex)         _ENDPOINT_GET_MAXSIZE2(ENDPOINT_DETAILS_EP ## EPI
  94:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define _ENDPOINT_GET_MAXSIZE2(EPDetails)      _ENDPOINT_GET_MAXSIZE3(EPDetails)
  95:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define _ENDPOINT_GET_MAXSIZE3(MaxSize, Banks) (MaxSize)
  96:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  97:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define _ENDPOINT_GET_BANKS(EPIndex)           _ENDPOINT_GET_BANKS2(ENDPOINT_DETAILS_EP ## EPInd
  98:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define _ENDPOINT_GET_BANKS2(EPDetails)        _ENDPOINT_GET_BANKS3(EPDetails)
  99:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define _ENDPOINT_GET_BANKS3(MaxSize, Banks)   (Banks)
 100:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 101:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
 102:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_MAXEP             7
 103:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 104:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP0               64,  1
 105:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP1               256, 2
 106:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP2               64,  2
 107:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP3               64,  2
 108:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP4               64,  2
 109:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP5               64,  2
 110:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP6               64,  2
 111:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#else
 112:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_MAXEP             5
 113:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 114:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP0               64,  1
 115:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP1               64,  1
 116:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP2               64,  1
 117:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP3               64,  2
 118:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP4               64,  2
 119:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#endif
 120:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 121:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Inline Functions: */
 122:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT A
 123:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                                                       ATTR_ALWAYS_INLINE;
 124:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
 125:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 126:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint8_t  MaskVal    = 0;
 127:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint16_t CheckBytes = 8;
 128:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 129:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				while (CheckBytes < Bytes)
 130:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				{
 131:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					MaskVal++;
 132:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					CheckBytes <<= 1;
 133:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				}
 134:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 135:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (MaskVal << EPSIZE0);
 136:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 137:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 138:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Function Prototypes: */
 139:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			void Endpoint_ClearEndpoints(void);
 140:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
 141:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                    const uint8_t UECFG0XData,
 142:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                    const uint8_t UECFG1XData);
 143:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 144:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	#endif
 145:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 146:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Public Interface - May be used in end-application: */
 147:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Macros: */			
 148:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** \name Endpoint Bank Mode Masks */
 149:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			//@{
 150:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Mask for the bank mode selection for the \ref Endpoint_ConfigureEndpoint() macro. This indic
 151:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  that the endpoint should have one single bank, which requires less USB FIFO memory but resul
 152:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  in slower transfers as only one USB device (the AVR or the host) can access the endpoint's
 153:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  bank at the one time.
 154:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 155:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define ENDPOINT_BANK_SINGLE                    (0 << EPBK0)
 156:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 157:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Mask for the bank mode selection for the \ref Endpoint_ConfigureEndpoint() macro. This indic
 158:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  that the endpoint should have two banks, which requires more USB FIFO memory but results
 159:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  in faster transfers as one USB device (the AVR or the host) can access one bank while the ot
 160:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  accesses the second bank.
 161:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 162:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define ENDPOINT_BANK_DOUBLE                    (1 << EPBK0)
 163:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			//@}
 164:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 165:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#if (!defined(FIXED_CONTROL_ENDPOINT_SIZE) || defined(__DOXYGEN__))
 166:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				/** Default size of the default control endpoint's bank, until altered by the control endpoint 
 167:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 *  value in the device descriptor. Not available if the \c FIXED_CONTROL_ENDPOINT_SIZE token i
 168:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 */
 169:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_CONTROLEP_DEFAULT_SIZE     8
 170:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#endif
 171:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 172:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Retrieves the maximum bank size in bytes of a given endpoint.
 173:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 174:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note This macro will only work correctly on endpoint indexes that are compile-time constant
 175:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        defined by the preprocessor.
 176:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 177:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] EPIndex  Endpoint number, a value between 0 and (\ref ENDPOINT_TOTAL_ENDPOINTS - 
 178:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 179:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define ENDPOINT_MAX_SIZE(EPIndex)              _ENDPOINT_GET_MAXSIZE(EPIndex)
 180:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 181:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Retrieves the total number of banks supported by the given endpoint.
 182:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 183:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note This macro will only work correctly on endpoint indexes that are compile-time constant
 184:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        defined by the preprocessor.
 185:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 186:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] EPIndex  Endpoint number, a value between 0 and (\ref ENDPOINT_TOTAL_ENDPOINTS - 
 187:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 188:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define ENDPOINT_BANKS_SUPPORTED(EPIndex)       _ENDPOINT_GET_BANKS(EPIndex)
 189:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 190:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#if !defined(CONTROL_ONLY_DEVICE) || defined(__DOXYGEN__)
 191:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				/** Total number of endpoints (including the default control endpoint at address 0) which may
 192:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 *  be used in the device. Different USB AVR models support different amounts of endpoints,
 193:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 *  this value reflects the maximum number of endpoints for the currently selected AVR model.
 194:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 */
 195:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_TOTAL_ENDPOINTS            ENDPOINT_DETAILS_MAXEP
 196:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#else
 197:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_TOTAL_ENDPOINTS            1
 198:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#endif
 199:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 200:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Enums: */
 201:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Enum for the possible error return codes of the \ref Endpoint_WaitUntilReady() function.
 202:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 203:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointRW_AVR8
 204:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 205:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			enum Endpoint_WaitUntilReady_ErrorCodes_t
 206:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 207:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_NoError                 = 0, /**< Endpoint is ready for next packet, no erro
 208:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_EndpointStalled         = 1, /**< The endpoint was stalled during the stream
 209:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   transfer by the host or device.
 210:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 211:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_DeviceDisconnected      = 2,	/**< Device was disconnected from the host whil
 212:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   waiting for the endpoint to become ready.
 213:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 214:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_BusSuspended            = 3, /**< The USB bus has been suspended by the host
 215:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   no USB endpoint traffic can occur until th
 216:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   has resumed.
 217:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 218:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_Timeout                 = 4, /**< The host failed to accept or send the next
 219:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   within the software timeout period set by 
 220:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   \ref USB_STREAM_TIMEOUT_MS macro.
 221:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 222:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			};
 223:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 224:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Inline Functions: */
 225:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Configures the specified endpoint number with the given endpoint type, direction, bank size
 226:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  and banking mode. Once configured, the endpoint may be read from or written to, depending
 227:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  on its direction.
 228:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 229:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Number     Endpoint number to configure. This must be more than 0 and less than
 230:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        \ref ENDPOINT_TOTAL_ENDPOINTS.
 231:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 232:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Type       Type of endpoint to configure, a \c EP_TYPE_* mask. Not all endpoint t
 233:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        are available on Low Speed USB devices - refer to the USB 2.0 specific
 234:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 235:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Direction  Endpoint data direction, either \ref ENDPOINT_DIR_OUT or \ref ENDPOINT
 236:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        All endpoints (except Control type) are unidirectional - data may only
 237:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        from or written to the endpoint bank based on its direction, not both.
 238:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 239:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Size       Size of the endpoint's bank, where packets are stored before they are 
 240:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        to the USB host, or after they have been received from the USB host (d
 241:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        the endpoint's data direction). The bank size must indicate the maximu
 242:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        that the endpoint can handle.
 243:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 244:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Banks      Number of banks to use for the endpoint being configured, an \c ENDPOI
 245:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        More banks uses more USB DPRAM, but offers better performance. Isochro
 246:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        endpoints <b>must</b> have at least two banks.
 247:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 248:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note When the \c ORDERED_EP_CONFIG compile time option is used, Endpoints <b>must</b> be co
 249:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        ascending order, or bank corruption will occur.
 250:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        \n\n
 251:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 252:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note Different endpoints may have different maximum packet sizes based on the endpoint's in
 253:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        the chosen microcontroller model's datasheet to determine the maximum bank size for ea
 254:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        \n\n
 255:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 256:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note The default control endpoint should not be manually configured by the user application
 257:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        it is automatically configured by the library internally.
 258:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        \n\n
 259:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 260:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note This routine will automatically select the specified endpoint upon success. Upon failu
 261:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        which failed to reconfigure correctly will be selected.
 262:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 263:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the configuration succeeded, \c false otherwise.
 264:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 265:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Number,
 266:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Type,
 267:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Direction,
 268:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint16_t Size,
 269:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Banks) ATTR_ALWAYS_INLINE;
 270:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Number,
 271:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Type,
 272:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Direction,
 273:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint16_t Size,
 274:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Banks)
 275:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 276:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 
 277:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                      ((1 << ALLOC) | Banks | Endpoint_BytesToEPSizeMask(Size))
 278:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 279:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 280:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Indicates the number of bytes currently stored in the current endpoint's selected bank.
 281:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 282:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note The return width of this function may differ, depending on the maximum endpoint bank s
 283:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        of the selected AVR model.
 284:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 285:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointRW_AVR8
 286:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 287:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Total number of bytes in the currently selected Endpoint's FIFO buffer.
 288:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 289:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
 290:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint16_t Endpoint_BytesInEndpoint(void)
 291:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 292:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
 293:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return UEBCX;
 294:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#elif defined(USB_SERIES_4_AVR)
 295:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return (((uint16_t)UEBCHX << 8) | UEBCLX);
 296:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#elif defined(USB_SERIES_2_AVR)
 297:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return UEBCLX;
 298:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 299:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 300:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 301:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Get the endpoint address of the currently selected endpoint. This is typically used to save
 302:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  the currently selected endpoint number so that it can be restored after another endpoint has
 303:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  been manipulated.
 304:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 305:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Index of the currently selected endpoint.
 306:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 307:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLI
 308:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
 309:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 310:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 311:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return (UENUM & ENDPOINT_EPNUM_MASK);
 312:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 313:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return ENDPOINT_CONTROLEP;
 314:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 315:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 316:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 317:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Selects the given endpoint number. If the address from the device descriptors is used, the
 318:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  value should be masked with the \ref ENDPOINT_EPNUM_MASK constant to extract only the endpoi
 319:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  number (and discarding the endpoint direction bit).
 320:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 321:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  Any endpoint operations which do not require the endpoint number to be indicated will operat
 322:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  the currently selected endpoint.
 323:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 324:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] EndpointNumber Endpoint number to select.
 325:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 326:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
 327:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
 328:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 329:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 330:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UENUM = EndpointNumber;
 331:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 332:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 333:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 334:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Resets the endpoint bank FIFO. This clears all the endpoint banks and resets the USB control
 335:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  data In and Out pointers to the bank's contents.
 336:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 337:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
 338:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 339:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
 340:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
 341:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 342:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UERST = (1 << EndpointNumber);
 343:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UERST = 0;
 344:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 345:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 346:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Enables the currently selected endpoint so that data can be sent and received through it to
 347:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  and from a host.
 348:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 349:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
 350:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 351:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
 352:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_EnableEndpoint(void)
 353:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 354:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << EPEN);
 355:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 356:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 357:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Disables the currently selected endpoint so that data cannot be sent and received through it
 358:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  to and from a host.
 359:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 360:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
 361:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_DisableEndpoint(void)
 362:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 363:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX &= ~(1 << EPEN);
 364:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 365:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 366:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint is enabled, but not necessarily configured.
 367:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 368:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
 369:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 370:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 371:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsEnabled(void)
 372:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 373:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UECONX & (1 << EPEN)) ? true : false);
 374:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 375:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 376:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Retrieves the number of busy banks in the currently selected endpoint, which have been queue
 377:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  transmission via the \ref Endpoint_ClearIN() command, or are awaiting acknowledgement via th
 378:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ref Endpoint_ClearOUT() command.
 379:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 380:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 381:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 382:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Total number of busy banks in the selected endpoint.
 383:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 384:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetBusyBanks(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
 385:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetBusyBanks(void)
 386:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 387:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (UESTA0X & (0x03 << NBUSYBK0));
 388:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 389:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 390:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Aborts all pending IN transactions on the currently selected endpoint, once the bank
 391:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  has been queued for transmission to the host via \ref Endpoint_ClearIN(). This function
 392:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  will terminate all queued transactions, resetting the endpoint banks ready for a new
 393:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  packet.
 394:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 395:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 396:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 397:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_AbortPendingIN(void)
 398:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 399:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				while (Endpoint_GetBusyBanks() != 0)
 400:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				{
 401:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX |= (1 << RXOUTI);
 402:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					while (UEINTX & (1 << RXOUTI));
 403:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				}
 404:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 405:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 406:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint may be read from (if data is waiting in the en
 407:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  bank and the endpoint is an OUT direction, or if the bank is not yet full if the endpoint is
 408:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  direction). This function will return false if an error has occurred in the endpoint, if the
 409:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  is an OUT direction and no packet (or an empty packet) has been received, or if the endpoint
 410:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  direction and the endpoint bank is full.
 411:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 412:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 413:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 414:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the currently selected endpoint may be read from or written to, d
 415:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *          on its direction.
 416:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 417:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 418:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsReadWriteAllowed(void)
 419:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 420:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RWAL)) ? true : false);
 421:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 422:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 423:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint is configured.
 424:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 425:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false oth
 426:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 427:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 428:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsConfigured(void)
 429:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 430:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 431:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 432:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 433:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Returns a mask indicating which INTERRUPT type endpoints have interrupted - i.e. their
 434:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  interrupt duration has elapsed. Which endpoints have interrupted can be determined by
 435:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  masking the return value against <tt>(1 << <i>{Endpoint Number}</i>)</tt>.
 436:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 437:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Mask whose bits indicate which endpoints have interrupted.
 438:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 439:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointInterrupts(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_I
 440:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointInterrupts(void)
 441:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 442:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return UEINT;
 443:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 444:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 445:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the specified endpoint number has interrupted (valid only for INTERRUPT type
 446:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  endpoints).
 447:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 448:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] EndpointNumber  Index of the endpoint whose interrupt flag should be tested.
 449:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 450:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the specified endpoint has interrupted, \c false otherwise.
 451:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 452:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_HasEndpointInterrupted(const uint8_t EndpointNumber) ATTR_WARN_UNUSE
 453:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_HasEndpointInterrupted(const uint8_t EndpointNumber)
 454:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 455:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((Endpoint_GetEndpointInterrupts() & (1 << EndpointNumber)) ? true : false);
 456:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 457:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 458:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the selected IN endpoint is ready for a new packet to be sent to the host.
 459:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 460:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 461:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 462:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwis
 463:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 464:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 465:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsINReady(void)
 466:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 467:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << TXINI)) ? true : false);
 468:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 469:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 470:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the selected OUT endpoint has received new packet from the host.
 471:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 472:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 473:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 474:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwis
 475:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 476:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 477:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsOUTReceived(void)
 478:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 479:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 480:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 481:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 482:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the current CONTROL type endpoint has received a SETUP packet.
 483:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 484:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 485:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 486:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false other
 487:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 488:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 489:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsSETUPReceived(void)
 490:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 491:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 492:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 493:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 494:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Clears a received SETUP packet on the currently selected CONTROL type endpoint, freeing up t
 495:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  endpoint for the next packet.
 496:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 497:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 498:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 499:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note This is not applicable for non CONTROL type endpoints.
 500:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 501:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
 502:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearSETUP(void)
 503:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 504:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEINTX &= ~(1 << RXSTPI);
 505:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 506:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 507:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Sends an IN packet to the host on the currently selected endpoint, freeing up the endpoint f
 508:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  next packet and switching to the alternative endpoint bank if double banked.
 509:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 510:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 511:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 512:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
 513:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearIN(void)
 514:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 515:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 516:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 517:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 518:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~(1 << TXINI);
 519:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 520:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 521:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 522:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Acknowledges an OUT packet to the host on the currently selected endpoint, freeing up the en
 523:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  for the next packet and switching to the alternative endpoint bank if double banked.
 524:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 525:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 526:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 527:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
 528:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearOUT(void)
 529:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 530:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 531:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 532:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 533:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~(1 << RXOUTI);
 534:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 535:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 536:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 537:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Stalls the current endpoint, indicating to the host that a logical problem occurred with the
 538:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  indicated endpoint and that the current transfer sequence should be aborted. This provides a
 539:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  way for devices to indicate invalid commands to the host so that the current transfer can be
 540:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  aborted and the host can begin its own recovery sequence.
 541:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 542:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  The currently selected endpoint remains stalled until either the \ref Endpoint_ClearStall() 
 543:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  is called, or the host issues a CLEAR FEATURE request to the device for the currently select
 544:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  endpoint.
 545:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 546:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 547:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 548:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
 549:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_StallTransaction(void)
 550:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 551:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << STALLRQ);
 552:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 553:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 554:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Clears the STALL condition on the currently selected endpoint.
 555:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 556:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 557:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 558:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
 559:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearStall(void)
 560:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 561:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << STALLRQC);
 562:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 563:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 564:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint is stalled, false otherwise.
 565:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 566:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 567:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 568:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
 569:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 570:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 571:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsStalled(void)
 572:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 573:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UECONX & (1 << STALLRQ)) ? true : false);
 574:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 575:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 576:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Resets the data toggle of the currently selected endpoint. */
 577:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
 578:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetDataToggle(void)
 579:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 580:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << RSTDT);
 581:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 582:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 583:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines the currently selected endpoint's direction.
 584:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 585:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
 586:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 587:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_IN
 588:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointDirection(void)
 589:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 590:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 591:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 592:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 593:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Sets the direction of the currently selected endpoint.
 594:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 595:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
 596:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 597:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE
 598:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
 599:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 600:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
 601:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 602:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 603:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Reads one byte from the currently selected endpoint's bank, for OUT direction endpoints.
 604:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 605:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPrimitiveRW_AVR8
 606:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 607:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
 608:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 609:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 610:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_Read_8(void)
 611:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 612:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return UEDATX;
  54               		.loc 2 612 0 discriminator 3
  55 0012 8091 F100 		lds r24,241
  56               	.LBE150:
  57               	.LBE149:
  51:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	#if defined(ARCH_BIG_ENDIAN)
  52:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	USB_ControlRequest.bmRequestType = Endpoint_Read_8();
  53:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	USB_ControlRequest.bRequest      = Endpoint_Read_8();
  54:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
  55:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
  56:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
  57:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	#else
  58:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
  59:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
  60:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeade
  61:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	  *(RequestHeader++) = Endpoint_Read_8();
  58               		.loc 1 61 0 discriminator 3
  59 0016 8193      		st Z+,r24
  60               	.LVL2:
  60:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	  *(RequestHeader++) = Endpoint_Read_8();
  61               		.loc 1 60 0 discriminator 3
  62 0018 80E0      		ldi r24,hi8(USB_ControlRequest+8)
  63 001a E030      		cpi r30,lo8(USB_ControlRequest+8)
  64 001c F807      		cpc r31,r24
  65 001e 01F4      		brne .L2
  66               	.LBE148:
  62:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	#endif
  63:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
  64:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	EVENT_USB_Device_ControlRequest();
  67               		.loc 1 64 0
  68 0020 0E94 0000 		call EVENT_USB_Device_ControlRequest
  69               	.LVL3:
  70               	.LBB151:
  71               	.LBB152:
 491:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
  72               		.loc 2 491 0
  73 0024 8091 E800 		lds r24,232
  74               	.LBE152:
  75               	.LBE151:
  65:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
  66:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	if (Endpoint_IsSETUPReceived())
  76               		.loc 1 66 0
  77 0028 83FF      		sbrs r24,3
  78 002a 00C0      		rjmp .L3
  79               	.LBB153:
  67:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	{
  68:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
  80               		.loc 1 68 0
  81 002c 8091 0000 		lds r24,USB_ControlRequest
  82               	.LVL4:
  69:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
  70:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 		switch (USB_ControlRequest.bRequest)
  83               		.loc 1 70 0
  84 0030 9091 0000 		lds r25,USB_ControlRequest+1
  85 0034 9A30      		cpi r25,lo8(10)
  86 0036 00F0      		brlo .+2
  87 0038 00C0      		rjmp .L3
  88 003a E92F      		mov r30,r25
  89 003c F0E0      		ldi r31,0
  90 003e E050      		subi r30,lo8(-(gs(.L5)))
  91 0040 F040      		sbci r31,hi8(-(gs(.L5)))
  92 0042 0C94 0000 		jmp __tablejump2__
  93               		.p2align	1
  94               	.L5:
  95 0046 0000      		.word gs(.L4)
  96 0048 0000      		.word gs(.L6)
  97 004a 0000      		.word gs(.L3)
  98 004c 0000      		.word gs(.L6)
  99 004e 0000      		.word gs(.L3)
 100 0050 0000      		.word gs(.L7)
 101 0052 0000      		.word gs(.L8)
 102 0054 0000      		.word gs(.L3)
 103 0056 0000      		.word gs(.L9)
 104 0058 0000      		.word gs(.L10)
 105               	.L4:
  71:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 		{
  72:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 			case REQ_GetStatus:
  73:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 106               		.loc 1 73 0 discriminator 1
 107 005a 8238      		cpi r24,lo8(-126)
 108 005c 01F0      		breq .+2
 109 005e 00C0      		rjmp .L3
 110               	.LVL5:
 111               	.LBB154:
 112               	.LBB155:
  74:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 					(bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT)))
  75:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 				{
  76:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 					USB_Device_GetStatus();
  77:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 				}
  78:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
  79:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 				break;
  80:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 			case REQ_ClearFeature:
  81:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 			case REQ_SetFeature:
  82:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
  83:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 					(bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_ENDPOINT)))
  84:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 				{
  85:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 					USB_Device_ClearSetFeature();
  86:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 				}
  87:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
  88:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 				break;
  89:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 			case REQ_SetAddress:
  90:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
  91:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 				  USB_Device_SetAddress();
  92:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
  93:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 				break;
  94:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 			case REQ_GetDescriptor:
  95:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
  96:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 					(bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_INTERFACE)))
  97:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 				{
  98:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 					USB_Device_GetDescriptor();
  99:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 				}
 100:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
 101:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 				break;
 102:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 			case REQ_GetConfiguration:
 103:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 104:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 				  USB_Device_GetConfiguration();
 105:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
 106:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 				break;
 107:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 			case REQ_SetConfiguration:
 108:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 109:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 				  USB_Device_SetConfiguration();
 110:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
 111:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 				break;
 112:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 		}
 113:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	}
 114:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
 115:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	if (Endpoint_IsSETUPReceived())
 116:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	{
 117:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 		Endpoint_StallTransaction();
 118:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 		Endpoint_ClearSETUP();
 119:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	}
 120:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** }
 121:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
 122:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** static void USB_Device_SetAddress(void)
 123:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** {
 124:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
 125:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
 126:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	GlobalInterruptDisable();
 127:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 				
 128:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	Endpoint_ClearSETUP();
 129:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
 130:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	Endpoint_ClearStatusStage();
 131:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
 132:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	while (!(Endpoint_IsINReady()));
 133:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
 134:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	USB_Device_SetDeviceAddress(DeviceAddress);
 135:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 136:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	
 137:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	SetGlobalInterruptMask(CurrentGlobalInt);
 138:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** }
 139:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
 140:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** static void USB_Device_SetConfiguration(void)
 141:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** {
 142:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	#if defined(FIXED_NUM_CONFIGURATIONS)
 143:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 144:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	  return;
 145:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	#else
 146:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	USB_Descriptor_Device_t* DevDescriptorPtr;
 147:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
 148:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	#if defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
 149:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 		#if defined(USE_FLASH_DESCRIPTORS)
 150:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 			#define MemoryAddressSpace  MEMSPACE_FLASH
 151:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 		#elif defined(USE_EEPROM_DESCRIPTORS)
 152:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 			#define MemoryAddressSpace  MEMSPACE_EEPROM
 153:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 		#elif defined(USE_SRAM_DESCRIPTORS)
 154:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 			#define MemoryAddressSpace  MEMSPACE_SRAM
 155:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 		#else
 156:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 			uint8_t MemoryAddressSpace;
 157:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 		#endif
 158:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	#endif
 159:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	
 160:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	if (CALLBACK_USB_GetDescriptor((DTYPE_Device << 8), 0, (void*)&DevDescriptorPtr
 161:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	#if defined(ARCH_HAS_MULTI_ADDRESS_SPACE) && \
 162:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIP
 163:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	                               , &MemoryAddressSpace
 164:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	#endif
 165:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	                               ) == NO_DESCRIPTOR)
 166:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	{
 167:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 		return;
 168:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	}
 169:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
 170:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	#if defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
 171:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	if (MemoryAddressSpace == MEMSPACE_FLASH)
 172:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	{
 173:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 		if (((uint8_t)USB_ControlRequest.wValue > pgm_read_byte(&DevDescriptorPtr->NumberOfConfigurations
 174:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 		  return;
 175:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	}
 176:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	else if (MemoryAddressSpace == MEMSPACE_EEPROM)
 177:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	{
 178:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 		if (((uint8_t)USB_ControlRequest.wValue > eeprom_read_byte(&DevDescriptorPtr->NumberOfConfigurati
 179:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 		  return;
 180:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	}
 181:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	else
 182:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	{
 183:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 		if ((uint8_t)USB_ControlRequest.wValue > DevDescriptorPtr->NumberOfConfigurations)
 184:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 		  return;
 185:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	}
 186:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	#else
 187:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	if ((uint8_t)USB_ControlRequest.wValue > DevDescriptorPtr->NumberOfConfigurations)
 188:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	  return;	
 189:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	#endif
 190:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	#endif
 191:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
 192:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	Endpoint_ClearSETUP();
 193:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
 194:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 195:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
 196:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	Endpoint_ClearStatusStage();
 197:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
 198:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	if (USB_Device_ConfigurationNumber)
 199:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	  USB_DeviceState = DEVICE_STATE_Configured;
 200:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	else
 201:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 202:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
 203:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	EVENT_USB_Device_ConfigurationChanged();
 204:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** }
 205:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
 206:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** static void USB_Device_GetConfiguration(void)
 207:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** {
 208:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	Endpoint_ClearSETUP();
 209:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
 210:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 211:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	Endpoint_ClearIN();
 212:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
 213:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	Endpoint_ClearStatusStage();
 214:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** }
 215:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
 216:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** #if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
 217:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** static void USB_Device_GetInternalSerialDescriptor(void)
 218:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** {
 219:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	struct
 220:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	{
 221:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 		USB_Descriptor_Header_t Header;
 222:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
 223:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	} SignatureDescriptor;
 224:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
 225:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	SignatureDescriptor.Header.Type = DTYPE_String;
 226:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 227:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	
 228:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);
 229:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
 230:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	Endpoint_ClearSETUP();
 231:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
 232:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 233:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	Endpoint_ClearOUT();
 234:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** }
 235:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** #endif
 236:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
 237:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** static void USB_Device_GetDescriptor(void)
 238:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** {
 239:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	const void* DescriptorPointer;
 240:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	uint16_t    DescriptorSize;
 241:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
 242:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	#if defined(ARCH_HAS_MULTI_ADDRESS_SPACE) && \
 243:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIP
 244:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	uint8_t DescriptorAddressSpace;
 245:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	#endif
 246:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
 247:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
 248:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 249:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	{
 250:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 		USB_Device_GetInternalSerialDescriptor();
 251:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 		return;
 252:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	}
 253:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	#endif
 254:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
 255:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIn
 256:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	                                                 &DescriptorPointer
 257:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	#if defined(ARCH_HAS_MULTI_ADDRESS_SPACE) && \
 258:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIP
 259:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	                                                 , &DescriptorAddressSpace
 260:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	#endif
 261:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 													 )) == NO_DESCRIPTOR)
 262:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	{
 263:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 		return;
 264:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	}
 265:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
 266:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	Endpoint_ClearSETUP();
 267:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
 268:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
 269:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
 270:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	#elif defined(USE_EEPROM_DESCRIPTORS)
 271:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
 272:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	#elif defined(USE_FLASH_DESCRIPTORS)
 273:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 274:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	#else
 275:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	if (DescriptorAddressSpace == MEMSPACE_FLASH)
 276:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	  Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 277:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	else if (DescriptorAddressSpace == MEMSPACE_EEPROM)
 278:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	  Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
 279:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	else
 280:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	  Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
 281:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	#endif
 282:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
 283:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	Endpoint_ClearOUT();
 284:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** }
 285:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
 286:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** static void USB_Device_GetStatus(void)
 287:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** {
 288:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	uint8_t CurrentStatus = 0;
 289:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
 290:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	switch (USB_ControlRequest.bmRequestType)
 291:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	{
 292:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 		#if !defined(NO_DEVICE_SELF_POWER) || !defined(NO_DEVICE_REMOTE_WAKEUP)
 293:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE):
 294:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 			#if !defined(NO_DEVICE_SELF_POWER)
 295:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 			if (USB_Device_CurrentlySelfPowered)
 296:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
 297:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 			#endif
 298:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
 299:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
 300:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 			if (USB_Device_RemoteWakeupEnabled)
 301:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 302:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 			#endif
 303:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 			break;
 304:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 		#endif
 305:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 		#if !defined(CONTROL_ONLY_DEVICE)
 306:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
 307:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 113               		.loc 1 307 0
 114 0060 8091 0000 		lds r24,USB_ControlRequest+4
 115               	.LVL6:
 116 0064 8770      		andi r24,lo8(7)
 117               	.LVL7:
 118               	.LBB156:
 119               	.LBB157:
 330:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 120               		.loc 2 330 0
 121 0066 8093 E900 		sts 233,r24
 122               	.LVL8:
 123               	.LBE157:
 124               	.LBE156:
 125               	.LBB158:
 126               	.LBB159:
 573:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 127               		.loc 2 573 0
 128 006a 8091 EB00 		lds r24,235
 129 006e 85FB      		bst r24,5
 130 0070 8827      		clr r24
 131 0072 80F9      		bld r24,0
 132               	.LVL9:
 133               	.LBE159:
 134               	.LBE158:
 135               	.LBB160:
 136               	.LBB161:
 330:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 137               		.loc 2 330 0
 138 0074 1092 E900 		sts 233,__zero_reg__
 139               	.LVL10:
 140               	.LBE161:
 141               	.LBE160:
 142               	.LBB162:
 143               	.LBB163:
 504:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 144               		.loc 2 504 0
 145 0078 9091 E800 		lds r25,232
 146 007c 977F      		andi r25,lo8(-9)
 147 007e 9093 E800 		sts 232,r25
 148               	.LVL11:
 149               	.LBE163:
 150               	.LBE162:
 151               	.LBB164:
 152               	.LBB165:
 613:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 614:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 615:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Writes one byte to the currently selected endpoint's bank, for IN direction endpoints.
 616:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 617:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPrimitiveRW_AVR8
 618:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 619:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
 620:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 621:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
 622:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_Write_8(const uint8_t Data)
 623:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 624:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEDATX = Data;
 625:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 626:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 627:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Discards one byte from the currently selected endpoint's bank, for OUT direction endpoints.
 628:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 629:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPrimitiveRW_AVR8
 630:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 631:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_Discard_8(void) ATTR_ALWAYS_INLINE;
 632:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_Discard_8(void)
 633:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 634:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint8_t Dummy;
 635:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 636:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				Dummy = UEDATX;
 637:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 638:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				(void)Dummy;
 639:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 640:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 641:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Reads two bytes from the currently selected endpoint's bank in little endian format, for OUT
 642:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  direction endpoints.
 643:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 644:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPrimitiveRW_AVR8
 645:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 646:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Next two bytes in the currently selected endpoint's FIFO buffer.
 647:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 648:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint16_t Endpoint_Read_16_LE(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 649:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint16_t Endpoint_Read_16_LE(void)
 650:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 651:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				union
 652:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				{
 653:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					uint16_t Value;
 654:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					uint8_t  Bytes[2];
 655:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				} Data;
 656:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 657:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				Data.Bytes[0] = UEDATX;
 658:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				Data.Bytes[1] = UEDATX;
 659:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 660:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return Data.Value;
 661:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 662:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 663:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Reads two bytes from the currently selected endpoint's bank in big endian format, for OUT
 664:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  direction endpoints.
 665:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 666:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPrimitiveRW_AVR8
 667:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 668:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Next two bytes in the currently selected endpoint's FIFO buffer.
 669:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 670:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint16_t Endpoint_Read_16_BE(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 671:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint16_t Endpoint_Read_16_BE(void)
 672:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 673:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				union
 674:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				{
 675:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					uint16_t Value;
 676:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					uint8_t  Bytes[2];
 677:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				} Data;
 678:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 679:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				Data.Bytes[1] = UEDATX;
 680:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				Data.Bytes[0] = UEDATX;
 681:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 682:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return Data.Value;
 683:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 684:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 685:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Writes two bytes to the currently selected endpoint's bank in little endian format, for IN
 686:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  direction endpoints.
 687:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 688:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPrimitiveRW_AVR8
 689:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 690:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
 691:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 692:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
 693:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_Write_16_LE(const uint16_t Data)
 694:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 695:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEDATX = (Data & 0xFF);
 153               		.loc 2 695 0
 154 0082 8093 F100 		sts 241,r24
 696:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEDATX = (Data >> 8);
 155               		.loc 2 696 0
 156 0086 1092 F100 		sts 241,__zero_reg__
 157               	.LVL12:
 158               	.L45:
 159               	.LBE165:
 160               	.LBE164:
 161               	.LBE155:
 162               	.LBE154:
 163               	.LBB166:
 164               	.LBB167:
 165               	.LBB168:
 166               	.LBB169:
 516:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 167               		.loc 2 516 0
 168 008a 8091 E800 		lds r24,232
 169 008e 8E77      		andi r24,lo8(126)
 170 0090 00C0      		rjmp .L44
 171               	.LVL13:
 172               	.L6:
 173               	.LBE169:
 174               	.LBE168:
 175               	.LBE167:
 176               	.LBE166:
  82:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 					(bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_ENDPOINT)))
 177               		.loc 1 82 0
 178 0092 282F      		mov r18,r24
 179 0094 2D7F      		andi r18,lo8(-3)
 180 0096 01F0      		breq .+2
 181 0098 00C0      		rjmp .L3
 182               	.LBB178:
 183               	.LBB179:
 308:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
 309:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 			CurrentStatus = Endpoint_IsStalled();
 310:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
 311:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 			Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
 312:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
 313:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 			break;
 314:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 		#endif
 315:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 		default:
 316:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 			return;
 317:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	}
 318:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
 319:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	Endpoint_ClearSETUP();
 320:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
 321:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	Endpoint_Write_16_LE(CurrentStatus);
 322:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	Endpoint_ClearIN();
 323:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
 324:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	Endpoint_ClearStatusStage();
 325:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** }
 326:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
 327:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** static void USB_Device_ClearSetFeature(void)
 328:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** {
 329:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 184               		.loc 1 329 0
 185 009a 8230      		cpi r24,lo8(2)
 186 009c 01F0      		breq .+2
 187 009e 00C0      		rjmp .L3
 330:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	{
 331:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
 332:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 		case REQREC_DEVICE:
 333:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 334:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 335:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 			else
 336:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 			  return;
 337:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
 338:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 			break;
 339:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 		#endif
 340:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 		#if !defined(CONTROL_ONLY_DEVICE)
 341:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 		case REQREC_ENDPOINT:
 342:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 188               		.loc 1 342 0
 189 00a0 8091 0000 		lds r24,USB_ControlRequest+2
 190               	.LVL14:
 191 00a4 8111      		cpse r24,__zero_reg__
 192 00a6 00C0      		rjmp .L13
 193               	.LBB180:
 343:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 			{
 344:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 194               		.loc 1 344 0
 195 00a8 8091 0000 		lds r24,USB_ControlRequest+4
 196 00ac 8770      		andi r24,lo8(7)
 197               	.LVL15:
 345:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
 346:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 				if (EndpointIndex == ENDPOINT_CONTROLEP)
 198               		.loc 1 346 0
 199 00ae 01F4      		brne .+2
 200 00b0 00C0      		rjmp .L3
 201               	.LVL16:
 202               	.LBB181:
 203               	.LBB182:
 330:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 204               		.loc 2 330 0
 205 00b2 8093 E900 		sts 233,r24
 206               	.LVL17:
 207               	.LBE182:
 208               	.LBE181:
 209               	.LBB183:
 210               	.LBB184:
 373:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 211               		.loc 2 373 0
 212 00b6 2091 EB00 		lds r18,235
 213               	.LBE184:
 214               	.LBE183:
 347:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 				  return;
 348:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
 349:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 				Endpoint_SelectEndpoint(EndpointIndex);
 350:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
 351:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 				if (Endpoint_IsEnabled())
 215               		.loc 1 351 0
 216 00ba 20FF      		sbrs r18,0
 217 00bc 00C0      		rjmp .L13
 352:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 				{
 353:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 218               		.loc 1 353 0
 219 00be 9330      		cpi r25,lo8(3)
 220 00c0 01F4      		brne .L15
 221               	.LBB185:
 222               	.LBB186:
 551:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 223               		.loc 2 551 0
 224 00c2 8091 EB00 		lds r24,235
 225               	.LVL18:
 226 00c6 8062      		ori r24,lo8(32)
 227               	.LVL19:
 228               	.L43:
 229               	.LBE186:
 230               	.LBE185:
 231               	.LBB187:
 232               	.LBB188:
 580:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 233               		.loc 2 580 0
 234 00c8 8093 EB00 		sts 235,r24
 235               	.LVL20:
 236               	.L13:
 237               	.LBE188:
 238               	.LBE187:
 239               	.LBE180:
 240               	.LBB195:
 241               	.LBB196:
 330:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 242               		.loc 2 330 0
 243 00cc 1092 E900 		sts 233,__zero_reg__
 244               	.LVL21:
 245               	.LBE196:
 246               	.LBE195:
 247               	.LBB197:
 248               	.LBB198:
 504:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 249               		.loc 2 504 0
 250 00d0 8091 E800 		lds r24,232
 251 00d4 877F      		andi r24,lo8(-9)
 252               	.L44:
 253               	.LBE198:
 254               	.LBE197:
 255               	.LBE179:
 256               	.LBE178:
 257               	.LBB201:
 258               	.LBB176:
 259               	.LBB171:
 260               	.LBB170:
 516:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 261               		.loc 2 516 0
 262 00d6 8093 E800 		sts 232,r24
 263               	.LBE170:
 264               	.LBE171:
 213:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** }
 265               		.loc 1 213 0
 266 00da 0E94 0000 		call Endpoint_ClearStatusStage
 267               	.LVL22:
 268 00de 00C0      		rjmp .L3
 269               	.LVL23:
 270               	.L15:
 271               	.LBE176:
 272               	.LBE201:
 273               	.LBB202:
 274               	.LBB200:
 275               	.LBB199:
 276               	.LBB190:
 277               	.LBB191:
 561:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 278               		.loc 2 561 0
 279 00e0 9091 EB00 		lds r25,235
 280 00e4 9061      		ori r25,lo8(16)
 281 00e6 9093 EB00 		sts 235,r25
 282               	.LVL24:
 283               	.LBE191:
 284               	.LBE190:
 285               	.LBB192:
 286               	.LBB193:
 342:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UERST = 0;
 287               		.loc 2 342 0
 288 00ea 21E0      		ldi r18,lo8(1)
 289 00ec 30E0      		ldi r19,0
 290 00ee 00C0      		rjmp 2f
 291               		1:
 292 00f0 220F      		lsl r18
 293               		2:
 294 00f2 8A95      		dec r24
 295 00f4 02F4      		brpl 1b
 296 00f6 2093 EA00 		sts 234,r18
 343:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 297               		.loc 2 343 0
 298 00fa 1092 EA00 		sts 234,__zero_reg__
 299               	.LVL25:
 300               	.LBE193:
 301               	.LBE192:
 302               	.LBB194:
 303               	.LBB189:
 580:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 304               		.loc 2 580 0
 305 00fe 8091 EB00 		lds r24,235
 306               	.LVL26:
 307 0102 8860      		ori r24,lo8(8)
 308 0104 00C0      		rjmp .L43
 309               	.LVL27:
 310               	.L7:
 311               	.LBE189:
 312               	.LBE194:
 313               	.LBE199:
 314               	.LBE200:
 315               	.LBE202:
  90:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 				  USB_Device_SetAddress();
 316               		.loc 1 90 0
 317 0106 8111      		cpse r24,__zero_reg__
 318 0108 00C0      		rjmp .L3
 319               	.LBB203:
 320               	.LBB204:
 124:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
 321               		.loc 1 124 0
 322 010a 1091 0000 		lds r17,USB_ControlRequest+2
 323 010e 1F77      		andi r17,lo8(127)
 324               	.LVL28:
 325               	.LBB205:
 326               	.LBB206:
 327               		.file 3 "LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h"
   1:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** /*
   2:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h ****              LUFA Library
   3:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h ****      Copyright (C) Dean Camera, 2011.
   4:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 
   5:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h ****   dean [at] fourwalledcubicle [dot] com
   6:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h ****            www.lufa-lib.org
   7:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** */
   8:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 
   9:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** /*
  10:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h ****   Copyright 2011  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 
  12:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h ****   Permission to use, copy, modify, distribute, and sell this
  13:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h ****   software and its documentation for any purpose is hereby granted
  14:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h ****   without fee, provided that the above copyright notice appear in
  15:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h ****   all copies and that both that the copyright notice and this
  16:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h ****   permission notice and warranty disclaimer appear in supporting
  17:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h ****   documentation, and that the name of the author not be used in
  18:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h ****   advertising or publicity pertaining to distribution of the
  19:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h ****   software without specific, written prior permission.
  20:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 
  21:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h ****   The author disclaim all warranties with regard to this
  22:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h ****   software, including all implied warranties of merchantability
  23:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h ****   and fitness.  In no event shall the author be liable for any
  24:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h ****   special, indirect or consequential damages or any damages
  25:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h ****   in an action of contract, negligence or other tortious action,
  27:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h ****   arising out of or in connection with the use or performance of
  28:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h ****   this software.
  29:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** */
  30:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 
  31:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** /** \file
  32:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h ****  *  \brief Common library convenience headers, macros and functions.
  33:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h ****  *
  34:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h ****  *  \copydetails Group_Common
  35:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h ****  */
  36:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 
  37:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** /** \defgroup Group_Common Common Utility Headers - LUFA/Drivers/Common/Common.h
  38:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h ****  *  \brief Common library convenience headers, macros and functions.
  39:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h ****  *
  40:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h ****  *  Common utility headers containing macros, functions, enums and types which are common to all
  41:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h ****  *  aspects of the library.
  42:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h ****  *
  43:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h ****  *  @{
  44:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h ****  */
  45:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h ****  
  46:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** /** \defgroup Group_GlobalInt Global Interrupt Macros
  47:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h ****  *  \brief Convenience macros for the management of interrupts globally within the device.
  48:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h ****  *
  49:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h ****  *  Macros and functions to create and control global interrupts within the device.
  50:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h ****  */
  51:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 
  52:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** #ifndef __LUFA_COMMON_H__
  53:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** #define __LUFA_COMMON_H__
  54:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 
  55:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 	/* Macros: */
  56:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 		#define __INCLUDE_FROM_COMMON_H
  57:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 		
  58:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 	/* Includes: */
  59:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 		#include <stdint.h>
  60:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 		#include <stdbool.h>
  61:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 		#include <string.h>
  62:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 		#include <stddef.h>
  63:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 		
  64:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 		#if defined(USE_LUFA_CONFIG_HEADER)
  65:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			#include "LUFAConfig.h"
  66:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 		#endif
  67:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 
  68:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 		#include "ArchitectureSpecific.h"
  69:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 		#include "CompilerSpecific.h"
  70:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 		#include "Architectures.h"
  71:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 		#include "Attributes.h"
  72:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 		#include "BoardTypes.h"
  73:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 		
  74:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 	/* Enable C linkage for C++ Compilers: */
  75:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 		#if defined(__cplusplus)
  76:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			extern "C" {
  77:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 		#endif
  78:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 
  79:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 	/* Architecture specific utility includes: */
  80:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 		#if defined(__DOXYGEN__)
  81:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			/** Type define for an unsigned integer the same width as the selected architecture's machine re
  82:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 *  This is distinct from the non-specific standard int data type, whose width is machine depend
  83:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 *  which may not reflect the actual machine register width on some targets (e.g. AVR8).
  84:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 */
  85:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			typedef MACHINE_REG_t uint_reg_t;
  86:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 		#elif (ARCH == ARCH_AVR8)
  87:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			#include <avr/io.h>
  88:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			#include <avr/interrupt.h>
  89:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			#include <avr/pgmspace.h>
  90:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			#include <avr/eeprom.h>
  91:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			#include <avr/boot.h>
  92:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			#include <util/delay.h>
  93:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			
  94:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			typedef uint8_t uint_reg_t;
  95:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			
  96:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			#define ARCH_HAS_EEPROM_ADDRESS_SPACE
  97:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			#define ARCH_HAS_FLASH_ADDRESS_SPACE
  98:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			#define ARCH_HAS_MULTI_ADDRESS_SPACE
  99:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			#define ARCH_LITTLE_ENDIAN
 100:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 
 101:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			#include "Endianness.h"
 102:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 		#elif (ARCH == ARCH_UC3)
 103:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			#include <avr32/io.h>
 104:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 
 105:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			// === TODO: Find abstracted way to handle these ===
 106:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			#define PROGMEM                  const
 107:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			#define pgm_read_byte(x)         *x
 108:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			#define memcmp_P(...)            memcmp(__VA_ARGS__)
 109:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			#define memcpy_P(...)            memcpy(__VA_ARGS__)
 110:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			// =================================================
 111:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 
 112:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			typedef uint32_t uint_reg_t;
 113:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			
 114:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			#define ARCH_BIG_ENDIAN
 115:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 
 116:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			#include "Endianness.h"
 117:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 		#elif (ARCH == ARCH_XMEGA)
 118:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			#include <avr/io.h>
 119:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			#include <avr/interrupt.h>
 120:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			#include <avr/pgmspace.h>
 121:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			#include <avr/eeprom.h>
 122:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			#include <util/delay.h>
 123:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			
 124:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			typedef uint8_t uint_reg_t;
 125:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			
 126:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			#define ARCH_HAS_EEPROM_ADDRESS_SPACE
 127:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			#define ARCH_HAS_FLASH_ADDRESS_SPACE
 128:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			#define ARCH_HAS_MULTI_ADDRESS_SPACE
 129:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			#define ARCH_LITTLE_ENDIAN
 130:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 
 131:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			#include "Endianness.h"		
 132:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 		#else
 133:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			#error Unknown device architecture specified.
 134:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 		#endif
 135:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 
 136:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 	/* Public Interface - May be used in end-application: */
 137:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 		/* Macros: */
 138:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			/** Macro for encasing other multi-statement macros. This should be used along with an opening b
 139:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 *  before the start of any multi-statement macro, so that the macros contents as a whole are tr
 140:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 *  as a discrete block and not as a list of separate statements which may cause problems when u
 141:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 *  a block (such as inline \c if statements).
 142:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 */
 143:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			#define MACROS                  do
 144:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 
 145:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			/** Macro for encasing other multi-statement macros. This should be used along with a preceding 
 146:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 *  brace at the end of any multi-statement macro, so that the macros contents as a whole are tr
 147:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 *  as a discrete block and not as a list of separate statements which may cause problems when u
 148:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 *  a block (such as inline \c if statements).
 149:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 */
 150:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			#define MACROE                  while (0)
 151:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 
 152:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			/** Convenience macro to determine the larger of two values.
 153:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 *
 154:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 *  \note This macro should only be used with operands that do not have side effects from being 
 155:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 *        multiple times.
 156:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 *
 157:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 *  \param[in] x  First value to compare
 158:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 *  \param[in] y  First value to compare
 159:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 *
 160:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 *  \return The larger of the two input parameters
 161:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 */
 162:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			#if !defined(MAX) || defined(__DOXYGEN__)
 163:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				#define MAX(x, y)               (((x) > (y)) ? (x) : (y))
 164:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			#endif
 165:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 
 166:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			/** Convenience macro to determine the smaller of two values.
 167:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 *
 168:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 *  \note This macro should only be used with operands that do not have side effects from being 
 169:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 *        multiple times.
 170:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 *
 171:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 *  \param[in] x  First value to compare
 172:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 *  \param[in] y  First value to compare
 173:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 *
 174:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 *  \return The smaller of the two input parameters
 175:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 */
 176:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			#if !defined(MIN) || defined(__DOXYGEN__)
 177:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				#define MIN(x, y)               (((x) < (y)) ? (x) : (y))
 178:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			#endif
 179:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			
 180:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			#if !defined(STRINGIFY) || defined(__DOXYGEN__)
 181:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				/** Converts the given input into a string, via the C Preprocessor. This macro puts literal quo
 182:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				 *  marks around the input, converting the source into a string literal.
 183:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				 *
 184:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				 *  \param[in] x  Input to convert into a string literal.
 185:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				 *
 186:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				 *  \return String version of the input.
 187:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				 */
 188:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				#define STRINGIFY(x)            #x
 189:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 
 190:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				/** Converts the given input into a string after macro expansion, via the C Preprocessor. This 
 191:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				 *  literal quotation marks around the expanded input, converting the source into a string lite
 192:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				 *
 193:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				 *  \param[in] x  Input to expand and convert into a string literal.
 194:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				 *
 195:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				 *  \return String version of the expanded input.
 196:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				 */
 197:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				#define STRINGIFY_EXPANDED(x)   STRINGIFY(x)
 198:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			#endif
 199:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 
 200:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			#if !defined(ISR) || defined(__DOXYGEN__)
 201:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				/** Macro for the definition of interrupt service routines, so that the compiler can insert the
 202:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				 *  prologue and epilogue code to properly manage the interrupt routine without affecting the m
 203:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				 *  state with unintentional side-effects.
 204:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				 *
 205:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				 *  Interrupt handlers written using this macro may still need to be registered with the microc
 206:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				 *  Interrupt Controller (if present) before they will properly handle incoming interrupt event
 207:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				 *
 208:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				 *  \note This macro is only supplied on some architectures, where the standard library does no
 209:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				 *        definition. If an existing definition exists, the alternative definition here will be
 210:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				 *
 211:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				 *  \ingroup Group_GlobalInt
 212:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				 *
 213:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				 *  \param Name  Unique name of the interrupt service routine.
 214:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				 */
 215:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				#define ISR(Name, ...)                  void Name (void) __attribute__((__interrupt__)) __VA_AR
 216:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			#endif
 217:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 
 218:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 		/* Inline Functions: */
 219:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			/** Function to reverse the individual bits in a byte - i.e. bit 7 is moved to bit 0, bit 6 to b
 220:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 *  etc.
 221:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 *
 222:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 *  \param[in] Byte  Byte of data whose bits are to be reversed.
 223:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 *
 224:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 *  \return Input data with the individual bits reversed (mirrored).
 225:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 */
 226:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			static inline uint8_t BitReverse(uint8_t Byte) ATTR_WARN_UNUSED_RESULT ATTR_CONST;
 227:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			static inline uint8_t BitReverse(uint8_t Byte)
 228:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			{
 229:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				Byte = (((Byte & 0xF0) >> 4) | ((Byte & 0x0F) << 4));
 230:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				Byte = (((Byte & 0xCC) >> 2) | ((Byte & 0x33) << 2));
 231:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				Byte = (((Byte & 0xAA) >> 1) | ((Byte & 0x55) << 1));
 232:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 
 233:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				return Byte;
 234:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			}
 235:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 
 236:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			/** Function to perform a blocking delay for a specified number of milliseconds. The actual dela
 237:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 *  at a minimum the specified number of milliseconds, however due to loop overhead and internal
 238:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 *  may be slightly higher.
 239:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 *
 240:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 *  \param[in] Milliseconds  Number of milliseconds to delay
 241:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 */
 242:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			static inline void Delay_MS(uint16_t Milliseconds) ATTR_ALWAYS_INLINE;
 243:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			static inline void Delay_MS(uint16_t Milliseconds)
 244:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			{
 245:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				#if (ARCH == ARCH_AVR8)
 246:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				if (GCC_IS_COMPILE_CONST(Milliseconds))
 247:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				{
 248:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 					_delay_ms(Milliseconds);
 249:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				}
 250:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				else
 251:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				{
 252:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 					while (Milliseconds--)
 253:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 					  _delay_ms(1);
 254:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				}
 255:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				#elif (ARCH == ARCH_UC3)
 256:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				while (Milliseconds--)
 257:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				{
 258:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 					__builtin_mtsr(AVR32_COUNT, 0);
 259:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 					while (__builtin_mfsr(AVR32_COUNT) < (F_CPU / 1000));				
 260:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				}
 261:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				#elif (ARCH == ARCH_XMEGA)
 262:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				if (GCC_IS_COMPILE_CONST(Milliseconds))
 263:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				{
 264:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 					_delay_ms(Milliseconds);
 265:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				}
 266:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				else
 267:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				{
 268:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 					while (Milliseconds--)
 269:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 					  _delay_ms(1);
 270:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				}				
 271:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				#endif
 272:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			}
 273:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 
 274:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			/** Retrieves a mask which contains the current state of the global interrupts for the device. T
 275:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 *  value can be stored before altering the global interrupt enable state, before restoring the
 276:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 *  flag(s) back to their previous values after a critical section using \ref SetGlobalInterrupt
 277:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 *
 278:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 *  \ingroup Group_GlobalInt
 279:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 *
 280:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 *  \return  Mask containing the current Global Interrupt Enable Mask bit(s).
 281:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 */
 282:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			static inline uint_reg_t GetGlobalInterruptMask(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT
 283:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			static inline uint_reg_t GetGlobalInterruptMask(void)
 284:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			{
 285:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				GCC_MEMORY_BARRIER();
 328               		.loc 3 285 0
 286:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 
 287:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				#if (ARCH == ARCH_AVR8)
 288:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				return SREG;
 329               		.loc 3 288 0
 330 0110 0FB7      		in r16,__SREG__
 331               	.LBE206:
 332               	.LBE205:
 333               	.LBB207:
 334               	.LBB208:
 289:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				#elif (ARCH == ARCH_UC3)
 290:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				return __builtin_mfsr(AVR32_SR);
 291:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				#elif (ARCH == ARCH_XMEGA)
 292:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				return SREG;
 293:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				#endif
 294:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 
 295:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				GCC_MEMORY_BARRIER();
 296:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			}
 297:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 
 298:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			/** Sets the global interrupt enable state of the microcontroller to the mask passed into the fu
 299:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 *  This can be combined with \ref GetGlobalInterruptMask() to save and restore the Global Inter
 300:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 *  Mask bit(s) of the device after a critical section has completed.
 301:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 *
 302:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 *  \ingroup Group_GlobalInt
 303:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 *
 304:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 *  \param[in] GlobalIntState  Global Interrupt Enable Mask value to use
 305:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 */
 306:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState) ATTR_ALWAYS_INLINE;
 307:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
 308:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			{
 309:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				GCC_MEMORY_BARRIER();
 310:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 
 311:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				#if (ARCH == ARCH_AVR8)
 312:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				SREG = GlobalIntState;
 313:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				#elif (ARCH == ARCH_UC3)
 314:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				if (GlobalIntState & AVR32_SR_GM)
 315:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				  __builtin_ssrf(AVR32_SR_GM_OFFSET);
 316:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				else
 317:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				  __builtin_csrf(AVR32_SR_GM_OFFSET);
 318:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				#elif (ARCH == ARCH_XMEGA)
 319:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				SREG = GlobalIntState;				
 320:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				#endif
 321:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				
 322:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				GCC_MEMORY_BARRIER();
 323:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			}
 324:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 		
 325:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			/** Enables global interrupt handling for the device, allowing interrupts to be handled.
 326:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 *
 327:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 *  \ingroup Group_GlobalInt
 328:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 */
 329:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			static inline void GlobalInterruptEnable(void) ATTR_ALWAYS_INLINE;
 330:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			static inline void GlobalInterruptEnable(void)
 331:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			{
 332:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				GCC_MEMORY_BARRIER();
 333:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 
 334:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				#if (ARCH == ARCH_AVR8)
 335:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				sei();
 336:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				#elif (ARCH == ARCH_UC3)
 337:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				__builtin_csrf(AVR32_SR_GM_OFFSET);
 338:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				#elif (ARCH == ARCH_XMEGA)
 339:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				sei();
 340:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				#endif
 341:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 
 342:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				GCC_MEMORY_BARRIER();
 343:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			}		
 344:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 
 345:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			/** Disabled global interrupt handling for the device, preventing interrupts from being handled.
 346:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 *
 347:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 *  \ingroup Group_GlobalInt
 348:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			 */
 349:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			static inline void GlobalInterruptDisable(void) ATTR_ALWAYS_INLINE;
 350:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			static inline void GlobalInterruptDisable(void)
 351:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			{
 352:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				GCC_MEMORY_BARRIER();
 335               		.loc 3 352 0
 353:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 
 354:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				#if (ARCH == ARCH_AVR8)
 355:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				cli();
 336               		.loc 3 355 0
 337               	/* #APP */
 338               	 ;  355 "LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h" 1
 339 0112 F894      		cli
 340               	 ;  0 "" 2
 356:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				#elif (ARCH == ARCH_UC3)
 357:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				__builtin_ssrf(AVR32_SR_GM_OFFSET);
 358:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				#elif (ARCH == ARCH_XMEGA)
 359:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				cli();
 360:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				#endif
 361:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 
 362:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				GCC_MEMORY_BARRIER();
 341               		.loc 3 362 0
 342               	/* #NOAPP */
 343               	.LBE208:
 344               	.LBE207:
 345               	.LBB209:
 346               	.LBB210:
 504:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 347               		.loc 2 504 0
 348 0114 8091 E800 		lds r24,232
 349               	.LVL29:
 350 0118 877F      		andi r24,lo8(-9)
 351 011a 8093 E800 		sts 232,r24
 352               	.LVL30:
 353               	.LBE210:
 354               	.LBE209:
 130:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
 355               		.loc 1 130 0
 356 011e 0E94 0000 		call Endpoint_ClearStatusStage
 357               	.LVL31:
 358               	.L16:
 359               	.LBB211:
 360               	.LBB212:
 467:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 361               		.loc 2 467 0
 362 0122 8091 E800 		lds r24,232
 363               	.LBE212:
 364               	.LBE211:
 132:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
 365               		.loc 1 132 0
 366 0126 80FF      		sbrs r24,0
 367 0128 00C0      		rjmp .L16
 368               	.LVL32:
 369               	.LBB213:
 370               	.LBB214:
 371               		.file 4 "LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h"
   1:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** /*
   2:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****              LUFA Library
   3:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****      Copyright (C) Dean Camera, 2011.
   4:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
   5:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   dean [at] fourwalledcubicle [dot] com
   6:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****            www.lufa-lib.org
   7:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** */
   8:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
   9:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** /*
  10:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   Copyright 2011  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
  12:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   Permission to use, copy, modify, distribute, and sell this
  13:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   software and its documentation for any purpose is hereby granted
  14:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   without fee, provided that the above copyright notice appear in
  15:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   all copies and that both that the copyright notice and this
  16:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   permission notice and warranty disclaimer appear in supporting
  17:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   documentation, and that the name of the author not be used in
  18:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   advertising or publicity pertaining to distribution of the
  19:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   software without specific, written prior permission.
  20:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
  21:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   The author disclaim all warranties with regard to this
  22:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   software, including all implied warranties of merchantability
  23:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   and fitness.  In no event shall the author be liable for any
  24:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   special, indirect or consequential damages or any damages
  25:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   in an action of contract, negligence or other tortious action,
  27:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   arising out of or in connection with the use or performance of
  28:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****   this software.
  29:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** */
  30:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
  31:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** /** \file
  32:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****  *  \brief USB Device definitions for the AVR8 microcontrollers.
  33:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****  *  \copydetails Group_Device_AVR8
  34:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****  *
  35:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  36:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****  *        dispatch header located in LUFA/Drivers/USB/USB.h.
  37:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****  */
  38:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
  39:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** /** \ingroup Group_Device
  40:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****  *  \defgroup Group_Device_AVR8 Device Management (AVR8)
  41:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****  *  \brief USB Device definitions for the AVR8 microcontrollers.
  42:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****  *
  43:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****  *  Architecture specific USB Device definitions for the Atmel 8-bit AVR microcontrollers.
  44:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****  *
  45:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****  *  @{
  46:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h ****  */
  47:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
  48:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** #ifndef __USBDEVICE_AVR8_H__
  49:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** #define __USBDEVICE_AVR8_H__
  50:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
  51:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 	/* Includes: */
  52:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		#include "../../../../Common/Common.h"
  53:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		#include "../USBController.h"
  54:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		#include "../StdDescriptors.h"
  55:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		#include "../USBInterrupt.h"
  56:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		#include "../Endpoint.h"
  57:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		
  58:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 	/* Enable C linkage for C++ Compilers: */
  59:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		#if defined(__cplusplus)
  60:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			extern "C" {
  61:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		#endif
  62:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
  63:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 	/* Preprocessor Checks: */
  64:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		#if !defined(__INCLUDE_FROM_USB_DRIVER)
  65:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			#error Do not include this file directly. Include LUFA/Drivers/USB/USB.h instead.
  66:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		#endif
  67:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
  68:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		#if (defined(USE_RAM_DESCRIPTORS) && defined(USE_EEPROM_DESCRIPTORS))
  69:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			#error USE_RAM_DESCRIPTORS and USE_EEPROM_DESCRIPTORS are mutually exclusive.
  70:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		#endif
  71:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
  72:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 	/* Public Interface - May be used in end-application: */
  73:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		/* Macros: */
  74:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			/** \name USB Device Mode Option Masks */
  75:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			//@{
  76:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR) || defin
  77:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				/** Mask for the Options parameter of the \ref USB_Init() function. This indicates that the
  78:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *  USB interface should be initialized in low speed (1.5Mb/s) mode.
  79:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *
  80:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *  \note Low Speed mode is not available on all USB AVR models.
  81:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *        \n
  82:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *
  83:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *  \note Restrictions apply on the number, size and type of endpoints which can be used
  84:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *        when running in low speed mode - refer to the USB 2.0 specification.
  85:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 */
  86:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				#define USB_DEVICE_OPT_LOWSPEED            (1 << 0)
  87:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			#endif
  88:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
  89:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			/** Mask for the Options parameter of the \ref USB_Init() function. This indicates that the
  90:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *  USB interface should be initialized in full speed (12Mb/s) mode.
  91:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 */
  92:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			#define USB_DEVICE_OPT_FULLSPEED               (0 << 0)
  93:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			//@}
  94:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			
  95:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			#if (!defined(NO_INTERNAL_SERIAL) && \
  96:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			     (defined(USB_SERIES_7_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_4_AVR) || \
  97:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			      (defined(USB_SERIES_2_AVR) && (!defined(__AVR_AT90USB82__) || defined(__AVR_AT90USB162__))
  98:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				  defined(__DOXYGEN__)))
  99:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				/** String descriptor index for the device's unique serial number string descriptor within the 
 100:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *  This unique serial number is used by the host to associate resources to the device (such as
 101:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *  number allocations) to a device regardless of the port it is plugged in to on the host. Som
 102:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *  a unique serial number internally, and setting the device descriptors serial number string 
 103:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *  will cause it to use the internal serial number.
 104:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *
 105:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *  On unsupported devices, this will evaluate to \ref NO_DESCRIPTOR and so will force the host
 106:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *  number for the device.
 107:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 */
 108:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				#define USE_INTERNAL_SERIAL            0xDC
 109:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
 110:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				/** Length of the device's unique internal serial number, in bits, if present on the selected m
 111:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *  model.
 112:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 */
 113:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				#define INTERNAL_SERIAL_LENGTH_BITS    80
 114:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				
 115:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				/** Start address of the internal serial number, in the appropriate address space, if present o
 116:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *  model.
 117:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 */
 118:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				#define INTERNAL_SERIAL_START_ADDRESS  0x0E
 119:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			#else
 120:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				#define USE_INTERNAL_SERIAL            NO_DESCRIPTOR
 121:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
 122:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				#define INTERNAL_SERIAL_LENGTH_BITS    0
 123:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				#define INTERNAL_SERIAL_START_ADDRESS  0
 124:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			#endif			
 125:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			
 126:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		/* Function Prototypes: */
 127:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			/** Sends a Remote Wakeup request to the host. This signals to the host that the device should
 128:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *  be taken out of suspended mode, and communications should resume.
 129:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *
 130:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *  Typically, this is implemented so that HID devices (mice, keyboards, etc.) can wake up the
 131:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *  host computer when the host has suspended all USB devices to enter a low power state.
 132:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *
 133:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *  \note This macro should only be used if the device has indicated to the host that it
 134:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *        supports the Remote Wakeup feature in the device descriptors, and should only be
 135:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *        issued if the host is currently allowing remote wakeup events from the device (i.e.,
 136:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *        the \ref USB_Device_RemoteWakeupEnabled flag is set). When the \c NO_DEVICE_REMOTE_WAK
 137:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *        compile time option is used, this macro is unavailable.
 138:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *        \n\n
 139:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *
 140:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *  \note The USB clock must be running for this function to operate. If the stack is initialize
 141:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *        the \ref USB_OPT_MANUAL_PLL option enabled, the user must ensure that the PLL is runni
 142:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *        before attempting to call this function.
 143:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *
 144:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *  \see \ref Group_StdDescriptors for more information on the RMWAKEUP feature and device descr
 145:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 */
 146:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			void USB_Device_SendRemoteWakeup(void);
 147:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
 148:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		/* Inline Functions: */
 149:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			/** Returns the current USB frame number, when in device mode. Every millisecond the USB bus is 
 150:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *  the frame number is incremented by one.
 151:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *
 152:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 *  \return Current USB frame number from the USB controller.
 153:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			 */
 154:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESUL
 155:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			static inline uint16_t USB_Device_GetFrameNumber(void)
 156:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			{
 157:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				return UDFNUM;
 158:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			}
 159:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
 160:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			#if !defined(NO_SOF_EVENTS)
 161:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				/** Enables the device mode Start Of Frame events. When enabled, this causes the
 162:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *  \ref EVENT_USB_Device_StartOfFrame() event to fire once per millisecond, synchronized to th
 163:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *  at the start of each USB frame when enumerated in device mode.
 164:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *
 165:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *  \note Not available when the \c NO_SOF_EVENTS compile time token is defined.
 166:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 */
 167:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				static inline void USB_Device_EnableSOFEvents(void) ATTR_ALWAYS_INLINE;
 168:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				static inline void USB_Device_EnableSOFEvents(void)
 169:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				{
 170:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 					USB_INT_Enable(USB_INT_SOFI);
 171:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				}
 172:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
 173:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				/** Disables the device mode Start Of Frame events. When disabled, this stops the firing of the
 174:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *  \ref EVENT_USB_Device_StartOfFrame() event when enumerated in device mode.
 175:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *
 176:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 *  \note Not available when the \c NO_SOF_EVENTS compile time token is defined.
 177:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				 */
 178:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				static inline void USB_Device_DisableSOFEvents(void) ATTR_ALWAYS_INLINE;
 179:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				static inline void USB_Device_DisableSOFEvents(void)
 180:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				{
 181:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 					USB_INT_Disable(USB_INT_SOFI);
 182:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				}
 183:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			#endif
 184:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
 185:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 	/* Private Interface - For use in library only: */
 186:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 	#if !defined(__DOXYGEN__)
 187:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 		/* Inline Functions: */
 188:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			#if defined(USB_DEVICE_OPT_LOWSPEED)
 189:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			static inline void USB_Device_SetLowSpeed(void) ATTR_ALWAYS_INLINE;
 190:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			static inline void USB_Device_SetLowSpeed(void)
 191:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			{
 192:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				UDCON |=  (1 << LSM);
 193:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			}
 194:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
 195:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
 196:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			static inline void USB_Device_SetFullSpeed(void)
 197:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			{
 198:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				UDCON &= ~(1 << LSM);
 199:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			}
 200:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			#endif
 201:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
 202:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
 203:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
 204:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			{
 205:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
 372               		.loc 4 205 0
 373 012a 8091 E300 		lds r24,227
 374 012e 8078      		andi r24,lo8(-128)
 375 0130 812B      		or r24,r17
 376               	.LVL33:
 206:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
 207:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				UDADDR = Temp;
 377               		.loc 4 207 0
 378 0132 8093 E300 		sts 227,r24
 208:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				UDADDR = Temp | (1 << ADDEN);
 379               		.loc 4 208 0
 380 0136 8068      		ori r24,lo8(-128)
 381               	.LVL34:
 382 0138 8093 E300 		sts 227,r24
 383               	.LVL35:
 384               	.LBE214:
 385               	.LBE213:
 135:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	
 386               		.loc 1 135 0
 387 013c 82E0      		ldi r24,lo8(2)
 388 013e 1111      		cpse r17,__zero_reg__
 389 0140 83E0      		ldi r24,lo8(3)
 390               	.L17:
 391 0142 8EBB      		out 0x1e,r24
 392               	.LVL36:
 393               	.LBB215:
 394               	.LBB216:
 309:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 
 395               		.loc 3 309 0
 312:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 				#elif (ARCH == ARCH_UC3)
 396               		.loc 3 312 0
 397 0144 0FBF      		out __SREG__,r16
 322:LUFA-111009/LUFA/Drivers/USB/Core/../../../Common/Common.h **** 			}
 398               		.loc 3 322 0
 399               	.LVL37:
 400               	.L3:
 401               	.LBE216:
 402               	.LBE215:
 403               	.LBE204:
 404               	.LBE203:
 405               	.LBE153:
 406               	.LBB230:
 407               	.LBB231:
 491:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 408               		.loc 2 491 0
 409 0146 8091 E800 		lds r24,232
 410               	.LBE231:
 411               	.LBE230:
 115:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	{
 412               		.loc 1 115 0
 413 014a 83FF      		sbrs r24,3
 414 014c 00C0      		rjmp .L1
 415               	.LBB232:
 416               	.LBB233:
 551:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 417               		.loc 2 551 0
 418 014e 8091 EB00 		lds r24,235
 419 0152 8062      		ori r24,lo8(32)
 420 0154 8093 EB00 		sts 235,r24
 421               	.LBE233:
 422               	.LBE232:
 423               	.LBB234:
 424               	.LBB235:
 504:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 425               		.loc 2 504 0
 426 0158 8091 E800 		lds r24,232
 427 015c 877F      		andi r24,lo8(-9)
 428 015e 8093 E800 		sts 232,r24
 429               	.L1:
 430               	/* epilogue start */
 431               	.LBE235:
 432               	.LBE234:
 120:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
 433               		.loc 1 120 0
 434 0162 0F90      		pop __tmp_reg__
 435 0164 0F90      		pop __tmp_reg__
 436 0166 DF91      		pop r29
 437 0168 CF91      		pop r28
 438 016a 1F91      		pop r17
 439 016c 0F91      		pop r16
 440 016e 0895      		ret
 441               	.LVL38:
 442               	.L8:
 443               	.LBB236:
  95:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 					(bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_INTERFACE)))
 444               		.loc 1 95 0
 445 0170 8058      		subi r24,lo8(-(-128))
 446               	.LVL39:
 447 0172 8230      		cpi r24,lo8(2)
 448 0174 00F4      		brsh .L3
 449               	.LBB217:
 450               	.LBB218:
 255:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	                                                 &DescriptorPointer
 451               		.loc 1 255 0
 452 0176 AE01      		movw r20,r28
 453 0178 4F5F      		subi r20,-1
 454 017a 5F4F      		sbci r21,-1
 455 017c 6091 0000 		lds r22,USB_ControlRequest+4
 456 0180 8091 0000 		lds r24,USB_ControlRequest+2
 457 0184 9091 0000 		lds r25,USB_ControlRequest+2+1
 458 0188 0E94 0000 		call CALLBACK_USB_GetDescriptor
 459               	.LVL40:
 460 018c BC01      		movw r22,r24
 461               	.LVL41:
 462 018e 892B      		or r24,r25
 463 0190 01F0      		breq .L3
 464               	.LBB219:
 465               	.LBB220:
 504:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 466               		.loc 2 504 0
 467 0192 9091 E800 		lds r25,232
 468 0196 977F      		andi r25,lo8(-9)
 469 0198 9093 E800 		sts 232,r25
 470               	.LBE220:
 471               	.LBE219:
 269:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	#elif defined(USE_EEPROM_DESCRIPTORS)
 472               		.loc 1 269 0
 473 019c 8981      		ldd r24,Y+1
 474 019e 9A81      		ldd r25,Y+2
 475 01a0 0E94 0000 		call Endpoint_Write_Control_Stream_LE
 476               	.LVL42:
 477               	.LBB221:
 478               	.LBB222:
 531:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 479               		.loc 2 531 0
 480 01a4 8091 E800 		lds r24,232
 481 01a8 8B77      		andi r24,lo8(123)
 482 01aa 8093 E800 		sts 232,r24
 483 01ae 00C0      		rjmp .L3
 484               	.LVL43:
 485               	.L9:
 486               	.LBE222:
 487               	.LBE221:
 488               	.LBE218:
 489               	.LBE217:
 103:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 				  USB_Device_GetConfiguration();
 490               		.loc 1 103 0
 491 01b0 8038      		cpi r24,lo8(-128)
 492 01b2 01F4      		brne .L3
 493               	.LBB223:
 494               	.LBB177:
 495               	.LBB172:
 496               	.LBB173:
 504:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 497               		.loc 2 504 0
 498 01b4 8091 E800 		lds r24,232
 499               	.LVL44:
 500 01b8 877F      		andi r24,lo8(-9)
 501 01ba 8093 E800 		sts 232,r24
 502               	.LVL45:
 503               	.LBE173:
 504               	.LBE172:
 210:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	Endpoint_ClearIN();
 505               		.loc 1 210 0
 506 01be 8091 0000 		lds r24,USB_Device_ConfigurationNumber
 507               	.LVL46:
 508               	.LBB174:
 509               	.LBB175:
 624:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 510               		.loc 2 624 0
 511 01c2 8093 F100 		sts 241,r24
 512 01c6 00C0      		rjmp .L45
 513               	.LVL47:
 514               	.L10:
 515               	.LBE175:
 516               	.LBE174:
 517               	.LBE177:
 518               	.LBE223:
 108:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 				  USB_Device_SetConfiguration();
 519               		.loc 1 108 0
 520 01c8 8111      		cpse r24,__zero_reg__
 521 01ca 00C0      		rjmp .L3
 522               	.LBB224:
 523               	.LBB225:
 143:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	  return;
 524               		.loc 1 143 0
 525 01cc 9091 0000 		lds r25,USB_ControlRequest+2
 526 01d0 9230      		cpi r25,lo8(2)
 527 01d2 00F0      		brlo .+2
 528 01d4 00C0      		rjmp .L3
 529               	.LBB226:
 530               	.LBB227:
 504:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 531               		.loc 2 504 0
 532 01d6 8091 E800 		lds r24,232
 533               	.LVL48:
 534 01da 877F      		andi r24,lo8(-9)
 535 01dc 8093 E800 		sts 232,r24
 536               	.LVL49:
 537               	.LBE227:
 538               	.LBE226:
 194:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
 539               		.loc 1 194 0
 540 01e0 9093 0000 		sts USB_Device_ConfigurationNumber,r25
 196:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
 541               		.loc 1 196 0
 542 01e4 0E94 0000 		call Endpoint_ClearStatusStage
 543               	.LVL50:
 198:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 	  USB_DeviceState = DEVICE_STATE_Configured;
 544               		.loc 1 198 0
 545 01e8 8091 0000 		lds r24,USB_Device_ConfigurationNumber
 546 01ec 8823      		tst r24
 547 01ee 01F0      		breq .L19
 548               	.L24:
 201:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
 549               		.loc 1 201 0
 550 01f0 84E0      		ldi r24,lo8(4)
 551 01f2 00C0      		rjmp .L21
 552               	.L19:
 553               	.LBB228:
 554               	.LBB229:
 209:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			}
 210:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 
 211:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
 212:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			static inline bool USB_Device_IsAddressSet(void)
 213:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 			{
 214:LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h **** 				return (UDADDR & (1 << ADDEN));
 555               		.loc 4 214 0
 556 01f4 8091 E300 		lds r24,227
 557               	.LBE229:
 558               	.LBE228:
 201:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** 
 559               		.loc 1 201 0
 560 01f8 87FD      		sbrc r24,7
 561 01fa 00C0      		rjmp .L24
 562 01fc 81E0      		ldi r24,lo8(1)
 563               	.L21:
 564 01fe 8EBB      		out 0x1e,r24
 203:LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.c **** }
 565               		.loc 1 203 0
 566 0200 0E94 0000 		call EVENT_USB_Device_ConfigurationChanged
 567               	.LVL51:
 568 0204 00C0      		rjmp .L3
 569               	.LBE225:
 570               	.LBE224:
 571               	.LBE236:
 572               		.cfi_endproc
 573               	.LFE81:
 575               		.comm	USB_Device_ConfigurationNumber,1,1
 576               		.text
 577               	.Letext0:
 578               		.file 5 "/Applications/Arduino.app/Contents/Java/hardware/tools/avr/avr/include/stdint.h"
 579               		.file 6 "LUFA-111009/LUFA/Drivers/USB/Core/StdRequestType.h"
 580               		.file 7 "LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../Device.h"
 581               		.file 8 "LUFA-111009/LUFA/Drivers/USB/Core/USBTask.h"
 582               		.file 9 "LUFA-111009/LUFA/Drivers/USB/Core/DeviceStandardReq.h"
 583               		.file 10 "LUFA-111009/LUFA/Drivers/USB/Core/AVR8/../AVR8/EndpointStream_AVR8.h"
 584               		.file 11 "LUFA-111009/LUFA/Drivers/USB/Core/Events.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 DeviceStandardReq.c
/var/folders/sf/8d7_tq_52cvgs8msn7t0mfr80000gn/T//cckIywkE.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/sf/8d7_tq_52cvgs8msn7t0mfr80000gn/T//cckIywkE.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/sf/8d7_tq_52cvgs8msn7t0mfr80000gn/T//cckIywkE.s:4      *ABS*:000000000000003f __SREG__
/var/folders/sf/8d7_tq_52cvgs8msn7t0mfr80000gn/T//cckIywkE.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/folders/sf/8d7_tq_52cvgs8msn7t0mfr80000gn/T//cckIywkE.s:6      *ABS*:0000000000000001 __zero_reg__
/var/folders/sf/8d7_tq_52cvgs8msn7t0mfr80000gn/T//cckIywkE.s:13     .text.USB_Device_ProcessControlRequest:0000000000000000 USB_Device_ProcessControlRequest
                            *COM*:0000000000000001 USB_Device_ConfigurationNumber

UNDEFINED SYMBOLS
USB_ControlRequest
EVENT_USB_Device_ControlRequest
__tablejump2__
Endpoint_ClearStatusStage
CALLBACK_USB_GetDescriptor
Endpoint_Write_Control_Stream_LE
EVENT_USB_Device_ConfigurationChanged
__do_clear_bss
